<?xml version="1.0" ?>
<tool id="parallel_pick_otus_sortmerna" name="parallel pick otus sortmerna" version="1.9.1">
	<description>Parallel pick otus using SortMeRNA</description>
	<requirements>
		<requirement type="package">qiime</requirement>
	</requirements>
	<command>parallel_pick_otus_sortmerna.py -i $input_fasta_fp -o parallel_pick_otus_sortmerna_output -r $refseqs_fp
#if $similarity:
 -s $similarity
#end if

#if str($sortmerna_db):
 --sortmerna_db=$sortmerna_db
#end if

#if $sortmerna_e_value:
 --sortmerna_e_value=$sortmerna_e_value
#end if

#if $sortmerna_coverage:
 --sortmerna_coverage=$sortmerna_coverage
#end if

#if $sortmerna_tabular:
 --sortmerna_tabular
#end if

#if $sortmerna_best_N_alignments:
 --sortmerna_best_N_alignments=$sortmerna_best_N_alignments
#end if

#if $sortmerna_max_pos:
 --sortmerna_max_pos=$sortmerna_max_pos
#end if

#if str($threads):
 --threads=$threads
#end if

#if $jobs_to_start:
 -O $jobs_to_start
#end if

#if $retain_temp_files:
 -R
#end if

#if $poll_directly:
 -T
#end if

#if $suppress_polling:
 -W
#end if

#if str($job_prefix):
 -X $job_prefix
#end if

#if $seconds_to_sleep:
 -Z $seconds_to_sleep
#end if
;
compress_path.py -i parallel_pick_otus_sortmerna_output -o $output_dir
</command>
	<inputs>
		<param label="-i/--input_fasta_fp: Path to input fasta file." name="input_fasta_fp" optional="False" type="data"/>
		<param label="-r/--refseqs_fp: Path to reference fasta file." name="refseqs_fp" optional="False" type="data"/>
		<param default="0.97" label="-s/--similarity: Sequence similarity threshold [default: 0.97]" name="similarity" optional="True" type="float"/>
		<param label="--sortmerna_db: Pre-existing database to search against when using -m sortmerna [default: None]" name="sortmerna_db" optional="True" type="text"/>
		<param default="1" label="--sortmerna_e_value: Maximum E-value when clustering [default = 1]" name="sortmerna_e_value" optional="True" type="float"/>
		<param default="0.97" label="--sortmerna_coverage: Mininum percent query coverage (of an alignment) to consider a hit, expressed as a fraction between 0 and 1 [default: 0.97]" name="sortmerna_coverage" optional="True" type="float"/>
		<param label="--sortmerna_tabular: Output alignments in the Blast-like tabular format with two additional columns including the CIGAR string and the percent query coverage [default: False]" name="sortmerna_tabular" selected="False" type="boolean"/>
		<param default="1" label="--sortmerna_best_N_alignments: Must be set together with --sortmerna_tabular. This option specifies how many alignments per read will be written [default: 1]" name="sortmerna_best_N_alignments" optional="True" type="integer"/>
		<param default="10000" label="--sortmerna_max_pos: The maximum number of positions per seed to store  in the indexed database [default: 10000]" name="sortmerna_max_pos" optional="True" type="integer"/>
		<param default="1" label="--threads: Specify the number of threads to use per job. Use --jobs_to_start to specify the number of jobs.[default: 1]" name="threads" optional="True" type="text"/>
		<param default="1" label="-O/--jobs_to_start: Number of jobs to start [default: 1]" name="jobs_to_start" optional="True" type="integer"/>
		<param label="-R/--retain_temp_files: retain temporary files after runs complete (useful for debugging) [default: False]" name="retain_temp_files" selected="False" type="boolean"/>
		<param label="-T/--poll_directly: Poll directly for job completion rather than running poller as a separate job. If -T is specified this script will not return until all jobs have completed. [default: False]" name="poll_directly" selected="False" type="boolean"/>
		<param label="-W/--suppress_polling: suppress polling of jobs and merging of results upon completion [default: False]" name="suppress_polling" selected="False" type="boolean"/>
		<param label="-X/--job_prefix: job prefix [default: descriptive prefix + random chars]" name="job_prefix" optional="True" type="text"/>
		<param default="1" label="-Z/--seconds_to_sleep: Number of seconds to sleep between checks for run  completion when polling runs [default: 1]" name="seconds_to_sleep" optional="True" type="integer"/>
	</inputs>
	<outputs>
		<data format="tgz" name="output_dir"/>
	</outputs>
	<help>This script works like the pick_otus.py script, but is intended to make use of multicore/multiprocessor environments to perform analyses in parallel.
The output consists of two files (i.e. seqs_otus.txt and seqs_otus.log). The .txt file is composed of tab-delimited lines, where the first field on each line corresponds to an OTU identifier which is the reference sequence identifier, and the remaining fields correspond to sequence identifiers assigned to that OTU. The resulting .log file contains a list of parameters passed to this script along with the output location of the resulting .txt file.</help>
</tool>
