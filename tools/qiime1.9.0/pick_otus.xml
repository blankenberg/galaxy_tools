<?xml version="1.0" ?>
<tool id="pick_otus" name="pick otus" version="1.9.1">
	<description>OTU picking</description>
	<requirements>
		<requirement type="package">qiime</requirement>
	</requirements>
	<command>
#if str($blast_db) != 'None':
 uncompress_tgz.py -i $blast_db -o blast_db;
 BLAST_DB_NAME=`get_blast_db_path.py -i blast_db`;
#end if
pick_otus.py -i $input_seqs_filepath
#if str($otu_picking_method) != 'None':
 -m $otu_picking_method
#end if

#if str($clustering_algorithm) != 'None':
 -c $clustering_algorithm
#end if

#if $max_cdhit_memory:
 -M $max_cdhit_memory
#end if
 -o pick_otus_output
#if str($refseqs_fp) != 'None':
 -r $refseqs_fp
#end if

#if str($blast_db) != 'None':
 -b \$BLAST_DB_NAME
#end if

#if $max_e_value_blast:
 -e $max_e_value_blast
#end if

#if str($sortmerna_db):
 --sortmerna_db=$sortmerna_db
#end if

#if $sortmerna_e_value:
 --sortmerna_e_value=$sortmerna_e_value
#end if

#if $sortmerna_coverage:
 --sortmerna_coverage=$sortmerna_coverage
#end if

#if $sortmerna_tabular:
 --sortmerna_tabular
#end if

#if $sortmerna_best_N_alignments:
 --sortmerna_best_N_alignments=$sortmerna_best_N_alignments
#end if

#if $sortmerna_max_pos:
 --sortmerna_max_pos=$sortmerna_max_pos
#end if

#if $min_aligned_percent:
 --min_aligned_percent=$min_aligned_percent
#end if

#if $similarity:
 -s $similarity
#end if

#if $sumaclust_exact:
 --sumaclust_exact
#end if

#if $sumaclust_l:
 --sumaclust_l
#end if

#if str($denovo_otu_id_prefix):
 --denovo_otu_id_prefix=$denovo_otu_id_prefix
#end if

#if $swarm_resolution:
 --swarm_resolution=$swarm_resolution
#end if

#if $trie_reverse_seqs:
 -q
#end if

#if $prefix_prefilter_length:
 -n $prefix_prefilter_length
#end if

#if $trie_prefilter:
 -t
#end if

#if $prefix_length:
 -p $prefix_length
#end if

#if $suffix_length:
 -u $suffix_length
#end if

#if $enable_rev_strand_match:
 -z
#end if

#if $suppress_presort_by_abundance_uclust:
 -D
#end if

#if $optimal_uclust:
 -A
#end if

#if $exact_uclust:
 -E
#end if

#if $user_sort:
 -B
#end if

#if $suppress_new_clusters:
 -C
#end if

#if str($max_accepts):
 --max_accepts=$max_accepts
#end if

#if str($max_rejects):
 --max_rejects=$max_rejects
#end if

#if $stepwords:
 --stepwords=$stepwords
#end if

#if str($word_length):
 --word_length=$word_length
#end if

#if $suppress_uclust_stable_sort:
 --suppress_uclust_stable_sort
#end if

#if $suppress_prefilter_exact_match:
 --suppress_prefilter_exact_match
#end if

#if $save_uc_files:
 -d
#end if

#if $percent_id_err:
 -j $percent_id_err
#end if

#if $minsize:
 -g $minsize
#end if

#if $abundance_skew:
 -a $abundance_skew
#end if

#if str($db_filepath) != 'None':
 -f $db_filepath
#end if

#if $perc_id_blast:
 --perc_id_blast=$perc_id_blast
#end if

#if $suppress_de_novo_chimera_detection:
 -k
#end if

#if $suppress_reference_chimera_detection:
 -x
#end if

#if $suppress_cluster_size_filtering:
 -l
#end if

#if $remove_usearch_logs:
 --remove_usearch_logs
#end if

#if $derep_fullseq:
 --derep_fullseq
#end if

#if str($non_chimeras_retention):
 -F $non_chimeras_retention
#end if

#if $minlen:
 --minlen=$minlen
#end if

#if $usearch_fast_cluster:
 --usearch_fast_cluster
#end if

#if str($usearch61_sort_method):
 --usearch61_sort_method=$usearch61_sort_method
#end if

#if $sizeorder:
 --sizeorder
#end if

#if str($threads):
 --threads=$threads
#end if
;
compress_path.py -i pick_otus_output -o $output_dir
</command>
	<inputs>
		<param label="-i/--input_seqs_filepath: Path to input sequences file" name="input_seqs_filepath" optional="False" type="data"/>
		<param label="-m/--otu_picking_method: Method for picking OTUs.  Valid choices are: sortmerna, mothur, trie, uclust_ref, usearch, usearch_ref, blast, usearch61, usearch61_ref, sumaclust, swarm, prefix_suffix, cdhit, uclust. The mothur method requires an input file of aligned sequences.  usearch will enable the usearch quality filtering pipeline. [default: uclust]" name="otu_picking_method" optional="True" type="select">
			<option selected="True" value="None">Selection is Optional</option>
			<option value="sortmerna">sortmerna</option>
			<option value="mothur">mothur</option>
			<option value="trie">trie</option>
			<option value="uclust_ref">uclust_ref</option>
			<option value="usearch">usearch</option>
			<option value="usearch_ref">usearch_ref</option>
			<option value="blast">blast</option>
			<option value="usearch61">usearch61</option>
			<option value="usearch61_ref">usearch61_ref</option>
			<option value="sumaclust">sumaclust</option>
			<option value="swarm">swarm</option>
			<option value="prefix_suffix">prefix_suffix</option>
			<option value="cdhit">cdhit</option>
			<option value="uclust">uclust</option>
		</param>
		<param label="-c/--clustering_algorithm: Clustering algorithm for mothur otu picking method.  Valid choices are: furthest, nearest, average. [default: furthest]" name="clustering_algorithm" optional="True" type="select">
			<option selected="True" value="None">Selection is Optional</option>
			<option value="furthest">furthest</option>
			<option value="nearest">nearest</option>
			<option value="average">average</option>
		</param>
		<param default="400" label="-M/--max_cdhit_memory: Maximum available memory to cd-hit-est (via the program's -M option) for cdhit OTU picking method (units of Mbyte) [default: 400]" name="max_cdhit_memory" optional="True" type="integer"/>
		<param default="/Users/lparsons/.virtualenvs/qiime/lib/python2.7/site-packages/qiime_default_reference/gg_13_8_otus/rep_set/97_otus.fasta" label="-r/--refseqs_fp: Path to reference sequences to search against when using -m blast, -m sortmerna, -m uclust_ref, -m usearch_ref, or -m usearch61_ref [default: /Users/lparsons/.virtualenvs/qiime/lib/python2.7/site-packages/qiime_default_reference/gg_13_8_otus/rep_set/97_otus.fasta]" name="refseqs_fp" optional="True" type="data"/>
		<param label="-b/--blast_db: Pre-existing database to blast against when using -m blast [default: None]" name="blast_db" optional="True" type="data"/>
		<param default="1e-10" label="-e/--max_e_value_blast: Max E-value when clustering with BLAST [default: 1e-10]" name="max_e_value_blast" optional="True" type="float"/>
		<param label="--sortmerna_db: Pre-existing database to search against when using -m sortmerna [default: None]" name="sortmerna_db" optional="True" type="text"/>
		<param default="1" label="--sortmerna_e_value: Maximum E-value when clustering [default = 1]" name="sortmerna_e_value" optional="True" type="float"/>
		<param default="0.97" label="--sortmerna_coverage: Mininum percent query coverage (of an alignment) to consider a hit, expressed as a fraction between 0 and 1 [default: 0.97]" name="sortmerna_coverage" optional="True" type="float"/>
		<param label="--sortmerna_tabular: Output alignments in the Blast tabular format with two additional columns including the CIGAR string and the percent query coverage [default: False]" name="sortmerna_tabular" selected="False" type="boolean"/>
		<param default="1" label="--sortmerna_best_N_alignments: Must be set together with --sortmerna_tabular. This option specifies how many alignments per read will be written [default: 1]" name="sortmerna_best_N_alignments" optional="True" type="integer"/>
		<param default="10000" label="--sortmerna_max_pos: The maximum number of positions per seed to store  in the indexed database [default: 10000]" name="sortmerna_max_pos" optional="True" type="integer"/>
		<param default="0.5" label="--min_aligned_percent: Minimum percent of query sequence that can be aligned to consider a hit, expressed as a fraction between 0 and 1 (BLAST OTU picker only) [default: 0.5]" name="min_aligned_percent" optional="True" type="float"/>
		<param default="0.97" label="-s/--similarity: Sequence similarity threshold (for blast, cdhit, uclust, uclust_ref, usearch, usearch_ref, usearch61, usearch61_ref, sumaclust, and sortmerna) [default: 0.97]" name="similarity" optional="True" type="float"/>
		<param label="--sumaclust_exact: A sequence is assigned to the best matching seed rather than the first matching seed passing the similarity threshold [default: False]" name="sumaclust_exact" selected="False" type="boolean"/>
		<param label="--sumaclust_l: Reference sequence length if the shortest [default: False]" name="sumaclust_l" selected="False" type="boolean"/>
		<param default="denovo" label="--denovo_otu_id_prefix: OTU identifier prefix (string) for the de novo OTU pickers (sumaclust, swarm and uclust) [default: denovo, OTU ids are ascendingintegers]" name="denovo_otu_id_prefix" optional="True" type="text"/>
		<param default="1" label="--swarm_resolution: Maximum number of differences allowed between two amplicons, meaning that two amplicons will be grouped if they have integer (or less) differences (see Swarm manual at https://github.com/torognes/swarm for more details). [default: 1]" name="swarm_resolution" optional="True" type="integer"/>
		<param label="-q/--trie_reverse_seqs: Reverse seqs before picking OTUs with the Trie OTU picker for suffix (rather than prefix) collapsing [default: False]" name="trie_reverse_seqs" selected="False" type="boolean"/>
		<param default="None" label="-n/--prefix_prefilter_length: Prefilter data so seqs with identical first prefix_prefilter_length are automatically grouped into a single OTU.  This is useful for large sequence collections where OTU picking doesn't scale well [default: None; 100 is a good value]" name="prefix_prefilter_length" optional="True" type="integer"/>
		<param label="-t/--trie_prefilter: prefilter data so seqs which are identical prefixes of a longer seq are automatically grouped into a single OTU; useful for large sequence collections where OTU picking doesn't scale well [default: False]" name="trie_prefilter" selected="False" type="boolean"/>
		<param default="50" label="-p/--prefix_length: Prefix length when using the prefix_suffix otu picker; WARNING: CURRENTLY DIFFERENT FROM prefix_prefilter_length (-n)! [default: 50]" name="prefix_length" optional="True" type="integer"/>
		<param default="50" label="-u/--suffix_length: Suffix length when using the prefix_suffix otu picker [default: 50]" name="suffix_length" optional="True" type="integer"/>
		<param label="-z/--enable_rev_strand_match: Enable reverse strand matching for uclust, uclust_ref, usearch, usearch_ref, usearch61, or usearch61_ref otu picking, will double the amount of memory used. [default: False]" name="enable_rev_strand_match" selected="False" type="boolean"/>
		<param label="-D/--suppress_presort_by_abundance_uclust: Suppress presorting of sequences by abundance when picking OTUs with uclust or uclust_ref [default: False]" name="suppress_presort_by_abundance_uclust" selected="False" type="boolean"/>
		<param label="-A/--optimal_uclust: Pass the --optimal flag to uclust for uclust otu picking. [default: False]" name="optimal_uclust" selected="False" type="boolean"/>
		<param label="-E/--exact_uclust: Pass the --exact flag to uclust for uclust otu picking. [default: False]" name="exact_uclust" selected="False" type="boolean"/>
		<param label="-B/--user_sort: Pass the --user_sort flag to uclust for uclust otu picking. [default: False]" name="user_sort" selected="False" type="boolean"/>
		<param label="-C/--suppress_new_clusters: Suppress creation of new clusters using seqs that don't match reference when using -m uclust_ref, -m usearch61_ref, or -m usearch_ref [default: False]" name="suppress_new_clusters" selected="False" type="boolean"/>
		<param default="default" label="--max_accepts: max_accepts value to uclust, uclust_ref, usearch61, and usearch61_ref.  By default, will use value suggested by method (uclust: 1, usearch61: 1) [default: default]" name="max_accepts" optional="True" type="text"/>
		<param default="default" label="--max_rejects: max_rejects value for uclust, uclust_ref, usearch61, and usearch61_ref.  With default settings, will use value recommended by clustering method used (uclust: 8, usearch61: 8 for usearch_fast_cluster option, 32 for reference and smallmem options) [default: default]" name="max_rejects" optional="True" type="text"/>
		<param default="8" label="--stepwords: stepwords value to uclust and uclust_ref [default: 8]" name="stepwords" optional="True" type="integer"/>
		<param default="default" label="--word_length: word length value for uclust, uclust_ref, and usearch, usearch_ref, usearch61, and usearch61_ref. With default setting, will use the setting recommended by the method (uclust: 8, usearch: 64, usearch61: 8).  int value can be supplied to override this setting. [default: default]" name="word_length" optional="True" type="text"/>
		<param label="--suppress_uclust_stable_sort: Don't pass --stable-sort to uclust [default: False]" name="suppress_uclust_stable_sort" selected="False" type="boolean"/>
		<param label="--suppress_prefilter_exact_match: Don't collapse exact matches before calling sortmerna, sumaclust or uclust [default: False]" name="suppress_prefilter_exact_match" selected="False" type="boolean"/>
		<param label="-d/--save_uc_files: Enable preservation of intermediate uclust (.uc) files that are used to generate clusters via uclust.  Also enables preservation of all intermediate files created by usearch  and usearch61. [default: False]" name="save_uc_files" selected="False" type="boolean"/>
		<param default="0.97" label="-j/--percent_id_err: Percent identity threshold for cluster error detection with usearch, expressed as a fraction between 0 and 1. [default: 0.97]" name="percent_id_err" optional="True" type="float"/>
		<param default="4" label="-g/--minsize: Minimum cluster size for size filtering with usearch. [default: 4]" name="minsize" optional="True" type="integer"/>
		<param default="2.0" label="-a/--abundance_skew: Abundance skew setting for de novo chimera detection with usearch. [default: 2.0]" name="abundance_skew" optional="True" type="float"/>
		<param default="None" label="-f/--db_filepath: Reference database of fasta sequences for reference based chimera detection with usearch. [default: None]" name="db_filepath" optional="True" type="data"/>
		<param default="0.97" label="--perc_id_blast: Percent ID for mapping OTUs created by usearch back to original sequence IDs [default: 0.97]" name="perc_id_blast" optional="True" type="float"/>
		<param label="-k/--suppress_de_novo_chimera_detection: Suppress de novo chimera detection in usearch. [default: False]" name="suppress_de_novo_chimera_detection" selected="False" type="boolean"/>
		<param label="-x/--suppress_reference_chimera_detection: Suppress reference based chimera detection in usearch. [default: False]" name="suppress_reference_chimera_detection" selected="False" type="boolean"/>
		<param label="-l/--suppress_cluster_size_filtering: Suppress cluster size filtering in usearch.  [default: False]" name="suppress_cluster_size_filtering" selected="False" type="boolean"/>
		<param label="--remove_usearch_logs: Disable creation of logs when usearch is called.  Up to nine logs are created, depending on filtering steps enabled.  [default: False]" name="remove_usearch_logs" selected="False" type="boolean"/>
		<param label="--derep_fullseq: Dereplication of full sequences, instead of subsequences. Faster than the default --derep_subseqs in usearch. [default: False]" name="derep_fullseq" selected="False" type="boolean"/>
		<param default="union" label="-F/--non_chimeras_retention: Selects subsets of sequences detected as non-chimeras to retain after de novo and reference based chimera detection.  Options are intersection or union.  union will retain sequences that are flagged as non-chimeric from either filter, while intersection will retain only those sequences that are flagged as non-chimeras from both detection methods. [default: union]" name="non_chimeras_retention" optional="True" type="text"/>
		<param default="64" label="--minlen: Minimum length of sequence allowed for usearch, usearch_ref, usearch61, and usearch61_ref. [default: 64]" name="minlen" optional="True" type="integer"/>
		<param label="--usearch_fast_cluster: Use fast clustering option for usearch or usearch61_ref with new clusters.  --enable_rev_strand_match can not be enabled with this option, and the only valid option for usearch61_sort_method is 'length'.  This option uses more memory than the default option for de novo clustering. [default: False]" name="usearch_fast_cluster" selected="False" type="boolean"/>
		<param default="abundance" label="--usearch61_sort_method: Sorting method for usearch61 and usearch61_ref.  Valid options are abundance, length, or None.  If the --usearch_fast_cluster option is enabled, the only sorting method allowed in length. [default: abundance]" name="usearch61_sort_method" optional="True" type="text"/>
		<param label="--sizeorder: Enable size based preference in clustering with usearch61. Requires that --usearch61_sort_method be abundance. [default: False]" name="sizeorder" selected="False" type="boolean"/>
		<param default="1" label="--threads: Specify number of threads (1 thread per core) to be used for usearch61, sortmerna, sumaclust and swarm commands that utilize multithreading. [default: 1]" name="threads" optional="True" type="text"/>
	</inputs>
	<outputs>
		<data format="tgz" name="output_dir"/>
	</outputs>
	<help>The OTU picking step assigns similar sequences to operational taxonomic units, or OTUs, by clustering sequences based on a user-defined similarity threshold. Sequences which are similar at or above the threshold level are taken to represent the presence of a taxonomic unit (e.g., a genus, when the similarity threshold is set at 0.94) in the sequence collection.

Currently, the following clustering methods have been implemented in QIIME:

1.  cd-hit (Li &amp; Godzik, 2006; Li, Jaroszewski, &amp; Godzik, 2001), which applies a &quot;longest-sequence-first list removal algorithm&quot; to cluster sequences.

2.  blast (Altschul, Gish, Miller, Myers, &amp; Lipman, 1990), which compares and clusters each sequence against a reference database of sequences.

3.  Mothur (Schloss et al., 2009), which requires an input file of aligned sequences.  The input file of aligned sequences may be generated from an input file like the one described below by running align_seqs.py.  For the Mothur method, the clustering algorithm may be specified as nearest-neighbor, furthest-neighbor, or average-neighbor.  The default algorithm is furthest-neighbor.

4.  prefix/suffix [Qiime team, unpublished], which will collapse sequences which are identical in their first and/or last bases (i.e., their prefix and/or suffix). The prefix and suffix lengths are provided by the user and default to 50 each.

5.  Trie [Qiime team, unpublished], which collapsing identical sequences and sequences which are subsequences of other sequences.

6.  uclust (Edgar, RC 2010), creates &quot;seeds&quot; of sequences which generate clusters based on percent identity.

7.  uclust_ref (Edgar, RC 2010), as uclust, but takes a reference database to use as seeds.  New clusters can be toggled on or off.

8.  usearch (Edgar, RC 2010, version v5.2.236), creates &quot;seeds&quot; of sequences which generate clusters based on percent identity, filters low abundance clusters, performs de novo and reference based chimera detection.

9.  usearch_ref (Edgar, RC 2010, version v5.2.236), as usearch, but takes a reference database to use as seeds.  New clusters can be toggled on or off.

Quality filtering pipeline with usearch 5.X is described as usearch_qf &quot;usearch quality filter&quot;, described here: http://qiime.org/tutorials/usearch_quality_filter.html

8.  usearch61 (Edgar, RC 2010, version v6.1.544), creates &quot;seeds&quot; of sequences which generate clusters based on percent identity.

9.  usearch61_ref (Edgar, RC 2010, version v6.1.544), as usearch61, but takes a reference database to use as seeds.  New clusters can be toggled on or off.

10. sumaclust (Mercier, C. et al., 2014, version 1.0), creates &quot;seeds&quot; of sequences which generate clusters based on similarity threshold.

11. sortmerna_v2 (Kopylova, E. et al., 2012), takes a reference database to use as seeds.

12. swarm (Mahe, F. et al., 2014), creates &quot;seeds&quot; of sequences which generate clusters based on a resolution threshold.


Chimera checking with usearch 6.X is implemented in identify_chimeric_seqs.py.  Chimera checking should be done first with usearch 6.X, and the filtered resulting fasta file can then be clustered.


The primary inputs for pick_otus.py are:

1. A FASTA file containing sequences to be clustered

2. An OTU threshold (default is 0.97, roughly corresponding to species-level OTUs);

3. The method to be applied for clustering sequences into OTUs.

pick_otus.py takes a standard fasta file as input.


The output consists of two files (i.e. seqs_otus.txt and seqs_otus.log). The .txt file is composed of tab-delimited lines, where the first field on each line corresponds to an (arbitrary) cluster identifier, and the remaining fields correspond to sequence identifiers assigned to that cluster. Sequence identifiers correspond to those provided in the input FASTA file.  Usearch (i.e. usearch quality filter) can additionally have log files for each intermediate call to usearch.

Example lines from the resulting .txt file:

=   ====    ====    ====
0   seq1    seq5
1   seq2
2   seq3
3   seq4    seq6    seq7
=   ====    ====    ====

This result implies that four clusters were created based on 7 input sequences. The first cluster (cluster id 0) contains two sequences, sequence ids seq1 and seq5; the second cluster (cluster id 1) contains one sequence, sequence id seq2; the third cluster (cluster id 2) contains one sequence, sequence id seq3, and the final cluster (cluster id 3) contains three sequences, sequence ids seq4, seq6, and seq7.

The resulting .log file contains a list of parameters passed to the pick_otus.py script along with the output location of the resulting .txt file.</help>
</tool>
