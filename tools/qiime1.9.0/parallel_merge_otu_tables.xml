<?xml version="1.0" ?>
<tool id="parallel_merge_otu_tables" name="parallel merge otu tables" version="1.9.1">
	<description>Parallel merge BIOM tables</description>
	<requirements>
		<requirement type="package">qiime</requirement>
	</requirements>
	<command>parallel_merge_otu_tables.py
#def list_dict_to_string(list_dict):
	#set $file_list = list_dict[0]['additional_input'].__getattr__('file_name')
	#for d in list_dict[1:]:
		#set $file_list = $file_list + ',' + d['additional_input'].__getattr__('file_name')
	#end for
	#return $file_list
#end def
 -i $list_dict_to_string($input_files_input_fps) -o parallel_merge_otu_tables_output
#if $cluster:
 -C
#end if

#if $seconds_to_sleep:
 -Z $seconds_to_sleep
#end if

#if str($job_prefix):
 -X $job_prefix
#end if
;
compress_path.py -i parallel_merge_otu_tables_output -o $output_dir
</command>
	<inputs>
		<repeat name="input_files_input_fps" optional="False" title="input_fps">
			<param label="-i/--input_fps: the otu tables in biom format (comma-separated)" name="additional_input" type="data"/>
		</repeat>
		<param label="-C/--cluster: Submit to a torque cluster" name="cluster" selected="False" type="boolean"/>
		<param default="1" label="-Z/--seconds_to_sleep: Number of seconds to sleep between checks for run  completion when polling runs [default: 1]" name="seconds_to_sleep" optional="True" type="integer"/>
		<param label="-X/--job_prefix: job prefix [default: descriptive prefix + random chars]" name="job_prefix" optional="True" type="text"/>
	</inputs>
	<outputs>
		<data format="tgz" name="output_dir"/>
	</outputs>
	<help>This script works like the merge_otu_tables.py script, but is intended to make use of multicore/multiprocessor environments to perform analyses in parallel.
The output consists of many files (i.e. merged_table.biom, merged_table.log and all intermediate merge tables). The .biom file contains the result of merging the individual BIOM tables. The resulting .log file contains a list of parameters passed to this script along with the output location of the resulting .txt file, the dependency hierarchy and runtime information for each individual merge.</help>
</tool>
